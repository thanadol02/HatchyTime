// plan.js ‚Äî ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á plan ‡∏Å‡∏±‡∏ö Flask API

document.addEventListener("DOMContentLoaded", () => {
  // ===== DOM =====
  const addBtn     = document.getElementById("addPlanBtn");
  const planList   = document.getElementById("planList");

  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ id ‡∏Ç‡∏≠‡∏á input ‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
  const titleEl = document.getElementById("planTitle") || document.getElementById("bookTitle");
  const dateEl  = document.getElementById("planDate");
  const descEl  = document.getElementById("planDesc")  || document.getElementById("notes");
  const prioEl  = document.getElementById("planPrio")  || document.getElementById("priority");
  const subjEl  = document.getElementById("planSubject") || document.getElementById("subject"); // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô select ‡∏´‡∏£‡∏∑‡∏≠ input

  // ===== Utils =====
  const esc = (s) => {
    const t = document.createElement("div");
    t.innerText = s ?? "";
    return t.innerHTML;
  };
  const fmtDate = (iso) => {
    try { return new Date(iso).toLocaleDateString("th-TH"); }
    catch { return iso || ""; }
  };

  // ===== Subjects (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÄ‡∏ï‡∏¥‡∏°) =====
  async function loadSubjectsIfNeeded() {
    if (!subjEl || subjEl.tagName !== "SELECT") return;
    try {
      const rs = await fetch("/api/subjects");
      const rows = await rs.json();
      subjEl.innerHTML = `<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ --</option>`;
      (rows || []).forEach(r => {
        const opt = document.createElement("option");
        opt.value = r.subjectID;
        opt.textContent = r.subjectname;
        subjEl.appendChild(opt);
      });
    } catch (e) {
      console.warn("‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", e);
    }
  }

  // ===== Plans =====
  async function loadPlans() {
    try {
      const rs = await fetch("/api/plans");
      if (!rs.ok) {
        planList.innerHTML = `<li class="plan-item">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</li>`;
        return;
      }
      const data = await rs.json();
      renderList(data);
    } catch (e) {
      console.error(e);
      planList.innerHTML = `<li class="plan-item">‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</li>`;
    }
  }

  function renderList(plans) {
    planList.innerHTML = "";
    if (!plans || plans.length === 0) {
      planList.innerHTML = `<li class="plan-item">üò¥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô</li>`;
      return;
    }
    plans.forEach((p) => {
      const li = document.createElement("li");
      li.className = "plan-item";
      if (p.is_done) li.style.opacity = 0.6;

      li.innerHTML = `
        <div class="plan-info">
          <span class="plan-title">${esc(p.planname)}</span>
          <span class="plan-date">‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${fmtDate(p.dateplan)}</span>
          ${p.priority ? `<span class="tag">‚≠ê ${esc(p.priority)}</span>` : ""}
          ${p.subjectname ? `<span class="tag">üè∑Ô∏è ${esc(p.subjectname)}</span>` : ""}
          ${p.description ? `<div class="plan-note">üìù ${esc(p.description)}</div>` : ""}
        </div>
        <div class="plan-actions">
          <button class="btn tiny"        data-action="edit"  data-id="${p.planID}">‚úèÔ∏è</button>
          <button class="btn tiny success" data-action="done"  data-id="${p.planID}">${p.is_done ? "‚Ü©Ô∏è" : "‚úÖ"}</button>
          <button class="btn tiny danger"  data-action="del"   data-id="${p.planID}">üóëÔ∏è</button>
        </div>
      `;
      planList.appendChild(li);
    });
  }

  async function addPlan() {
    const planname = (titleEl?.value || "").trim();
    const dateplan = (dateEl?.value || "").trim(); // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD ‡∏´‡∏£‡∏∑‡∏≠ ISO
    const description = (descEl?.value || "").trim();
    const priority = (prioEl?.value || "‡∏õ‡∏Å‡∏ï‡∏¥").trim();

    // subject ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô select (‡∏™‡πà‡∏á id) ‡∏´‡∏£‡∏∑‡∏≠ input (‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠)
    let subjectPayload = {};
    if (subjEl) {
      if (subjEl.tagName === "SELECT") {
        const sid = parseInt(subjEl.value, 10);
        if (sid) subjectPayload.subjectID = sid;
      } else {
        const sname = (subjEl.value || "").trim();
        if (sname) subjectPayload.subject = sname; // backend ‡∏à‡∏∞ map ‡πÄ‡∏õ‡πá‡∏ô subjectID ‡πÉ‡∏´‡πâ
      }
    }

    if (!planname) return alert("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡πà‡∏≠‡∏ô!");
    if (!dateplan) return alert("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô!");

    try {
      const rs = await fetch("/api/plans", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          planname, dateplan, priority, description, ...subjectPayload
        }),
      });
      const data = await rs.json();
      if (!rs.ok) {
        return alert(data?.error || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
      // reset form
      if (titleEl) titleEl.value = "";
      if (dateEl)  dateEl.value = "";
      if (descEl)  descEl.value = "";
      if (prioEl)  prioEl.value = "‡∏õ‡∏Å‡∏ï‡∏¥";
      if (subjEl)  subjEl.value = "";
      await loadPlans();
    } catch (e) {
      console.error(e);
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  }

  async function deletePlan(id) {
    if (!confirm("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?")) return;
    const rs = await fetch(`/api/plans/${id}`, { method: "DELETE" });
    if (!rs.ok) {
      const d = await rs.json().catch(() => ({}));
      return alert(d?.error || "‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
    loadPlans();
  }

  async function toggleDone(id, currentDone) {
    const rs = await fetch(`/api/plans/${id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ is_done: !currentDone }),
    });
    if (!rs.ok) {
      const d = await rs.json().catch(() => ({}));
      return alert(d?.error || "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
    loadPlans();
  }

  async function editPlan(id) {
    // inline ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏î‡πâ‡∏ß‡∏¢ prompt ‚Äî ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° UI ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const name = prompt("‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ):");
    const date = prompt("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (YYYY-MM-DD) (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ):");
    const prio = prompt("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏õ‡∏Å‡∏ï‡∏¥/‡∏™‡∏π‡∏á/‡∏î‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å) (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ):");
    const subj = prompt("‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á):");
    const note = prompt("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î/‡πÇ‡∏ô‡πâ‡∏ï (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ):");

    const patch = {};
    if (name) patch.planname = name;
    if (date) patch.dateplan = date;
    if (prio) patch.priority = prio;
    if (note) patch.description = note;
    if (subj) patch.subject = subj; // backend ‡∏à‡∏∞ resolve ‡πÄ‡∏õ‡πá‡∏ô subjectID

    if (Object.keys(patch).length === 0) return;

    const rs = await fetch(`/api/plans/${id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(patch),
    });
    if (!rs.ok) {
      const d = await rs.json().catch(() => ({}));
      return alert(d?.error || "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
    loadPlans();
  }

  // ===== Events =====
  addBtn?.addEventListener("click", addPlan);

  // event delegation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô list
  planList.addEventListener("click", (e) => {
    const btn = e.target.closest("button[data-action]");
    if (!btn) return;
    const id = +btn.dataset.id;
    const action = btn.dataset.action;
    if (action === "del") return deletePlan(id);
    if (action === "done") {
      // ‡∏´‡∏≤ state ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å DOM (‡∏ñ‡πâ‡∏≤‡∏Ç‡∏µ‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ done)
      const isDone = btn.textContent.includes("‚Ü©Ô∏è");
      return toggleDone(id, isDone);
    }
    if (action === "edit") return editPlan(id);
  });

  // ===== Init =====
  loadSubjectsIfNeeded();
  loadPlans();
});
